#include <dlfcn.h>
#include <iostream>
#include <string>
using namespace std;
static string macro_data=""
"\n"
"void FDC_Efficiency(bool save = 0){\n"
"  \n"
"  gStyle->SetPalette(1);\n"
"\n"
"  //gDirectory->cd();\n"
"  //TDirectory *gDirectory = TFile::Open(\"hd_root.root\");\n"
"  TDirectory *dir = (TDirectory*)gDirectory->FindObjectAny(\"FDC_Efficiency\");\n"
"  if(!dir) return;\n"
"  dir->cd();\n"
"\n"
"  gDirectory->cd(\"Track_Quality\");\n"
"  TCanvas *cTrackQuality = new TCanvas(\"cTrackQuality\", \"Track Quality Histograms\", 900, 800);\n"
"  cTrackQuality->Divide(3,2);\n"
"\n"
"  cTrackQuality->cd(1);\n"
"  TH1 *tmom = (TH1*) gDirectory->Get(\"hMom\");\n"
"  TH1 *tmom_acc = (TH1*) gDirectory->Get(\"hMom_accepted\");\n"
"  tmom->Draw();\n"
"  tmom_acc->SetLineColor(2);\n"
"  tmom_acc->Draw(\"same\");\n"
"\n"
"  cTrackQuality->cd(2);\n"
"  TH1 *ttheta = (TH1*) gDirectory->Get(\"hTheta\");\n"
"  TH1 *ttheta_acc = (TH1*) gDirectory->Get(\"hTheta_accepted\");\n"
"  ttheta->Draw();\n"
"  ttheta_acc->SetLineColor(2);\n"
"  ttheta_acc->Draw(\"same\");\n"
"\n"
"  cTrackQuality->cd(3);\n"
"  TH1 *tphi = (TH1*) gDirectory->Get(\"hPhi\");\n"
"  TH1 *tphi_acc = (TH1*) gDirectory->Get(\"hPhi_accepted\");\n"
"  tphi->SetMinimum(0.0);\n"
"  tphi->Draw();\n"
"  tphi_acc->SetLineColor(2);\n"
"  tphi_acc->Draw(\"same\");\n"
"\n"
"  cTrackQuality->cd(4);\n"
"  TH1 *tchi = (TH1*) gDirectory->Get(\"hChi2OverNDF\");\n"
"  TH1 *tchi_acc = (TH1*) gDirectory->Get(\"hChi2OverNDF_accepted\");\n"
"  tchi->Draw();\n"
"  tchi_acc->SetLineColor(2);\n"
"  tchi_acc->Draw(\"same\");\n"
"\n"
"  cTrackQuality->cd(5);\n"
"  TH1 *tcells = (TH1*) gDirectory->Get(\"hCellsHit\");\n"
"  TH1 *tcells_acc = (TH1*) gDirectory->Get(\"hCellsHit_accepted\");\n"
"  tcells->Draw();\n"
"  tcells_acc->SetLineColor(2);\n"
"  tcells_acc->Draw(\"same\");\n"
"\n"
"  cTrackQuality->cd(6);\n"
"  TH1 *trings = (TH1*) gDirectory->Get(\"hRingsHit\");\n"
"  TH1 *trings_acc = (TH1*) gDirectory->Get(\"hRingsHit_accepted\");\n"
"  trings->Draw();\n"
"  trings_acc->SetLineColor(2);\n"
"  trings_acc->Draw(\"same\");\n"
"\n"
"  Float_t minScale = 0.8;\n"
"  Float_t maxScale = 1.0;    \n"
"\n"
"  gDirectory->cd(\"../FDC_View\");\n"
"  TCanvas *cEfficiency_Wire = new TCanvas(\"cEfficiency_Wire\", \"Wire Efficiency\", 1200, 800);\n"
"  cEfficiency_Wire->Divide(6,4);\n"
"\n"
"  TGraphAsymmErrors *EffWire[24];\n"
"\n"
"  for(unsigned int icell=1; icell<=24; icell++){\n"
"    cEfficiency_Wire->cd(icell);\n"
"    char hname1[256];\n"
"    sprintf(hname1, \"fdc_wire_measured_cell[%d]\", icell);\n"
"    TH1 *h1 = (TH1*)(gDirectory->Get(hname1));\n"
"    char hname2[256];\n"
"    sprintf(hname2, \"fdc_wire_expected_cell[%d]\", icell);\n"
"    TH1 *h2 = (TH1*)(gDirectory->Get(hname2));\n"
"      \n"
"    if(h1 && h2){\n"
"      EffWire[icell-1] = new  TGraphAsymmErrors(h1, h2, \"ac\");\n"
"      EffWire[icell-1]->Draw(\"ap\");\n"
"      EffWire[icell-1]->SetMinimum(minScale);\n"
"      EffWire[icell-1]->SetMaximum(maxScale);\n"
"      EffWire[icell-1]->SetTitle(\"\");\n"
"      EffWire[icell-1]->GetXaxis()->SetTitle(\"Wire Number\");\n"
"      EffWire[icell-1]->GetYaxis()->SetTitle(\"Efficiency\");\n"
"      EffWire[icell-1]->GetYaxis()->SetTitleOffset(1.15);\n"
"      EffWire[icell-1]->SetMinimum(minScale);\n"
"      EffWire[icell-1]->SetMaximum(maxScale);\n"
"    }\n"
"  }\n"
"  if (save) cEfficiency_Wire->SaveAs(\"cEfficiencyWire.pdf\");\n"
"\n"
"  TCanvas *cEfficiency_Pseudo = new TCanvas(\"cEfficiency_Pseudo\", \"Pseudo Hit Efficiency\", 1200, 800);\n"
"  cEfficiency_Pseudo->Divide(6,4);\n"
"  double eff[24];\n"
"  double tot = 0;\n"
"    \n"
"  for(unsigned int icell=1; icell<=24; icell++){\n"
"    cEfficiency_Pseudo->cd(icell);\n"
"    char hname3[256];\n"
"    sprintf(hname3, \"fdc_pseudo_measured_cell[%d]\", icell);\n"
"    TH2 *h3 = (TH2*)(gDirectory->Get(hname3));\n"
"    char hname4[256];\n"
"    sprintf(hname4, \"fdc_pseudo_expected_cell[%d]\", icell);\n"
"    TH2 *h4 = (TH2*)(gDirectory->Get(hname4));\n"
"      \n"
"    if(h3 && h4){\n"
"      eff[icell-1] = (double) h3->GetEntries();\n"
"      eff[icell-1] /= (double) h4->GetEntries();\n"
"      \n"
"      h3->Divide(h4);\n"
"      h3->SetMinimum(minScale);\n"
"      h3->SetMaximum(maxScale);\n"
"      h3->GetXaxis()->SetTitle(\"X Position (cm)\");\n"
"      h3->GetYaxis()->SetTitle(\"Y Position (cm)\");\n"
"      h3->SetStats(0);\n"
"      h3->Draw(\"colz\");\n"
"\n"
"      cout << \"Pseudo-Efficiency of cell \" << icell << \" : \" << eff[icell-1] << endl;\n"
"      tot += eff[icell-1];\n"
"    }\n"
"  }\n"
"\n"
"  cout << \"Total : \" << tot/24. << endl;\n"
"\n"
"  dir->cd();\n"
"\n"
"  TCanvas *cEfficiency_vs = new TCanvas(\"cEfficiency_vs\", \"Efficiency vs Things\", 900, 600);\n"
"  cEfficiency_vs->Divide(3,2);\n"
"\n"
"  cEfficiency_vs->cd(1);\n"
"  TH1I *MeasDOCA = (TH1I*)(gDirectory->Get(\"Offline/Measured Hits Vs DOCA\"));\n"
"  TH1I *ExpDOCA = (TH1I*)(gDirectory->Get(\"Offline/Expected Hits Vs DOCA\"));\n"
"  if(MeasDOCA && ExpDOCA){\n"
"    TGraphAsymmErrors *EffDOCA = new  TGraphAsymmErrors(MeasDOCA, ExpDOCA, \"ac\");\n"
"    EffDOCA->Draw(\"ap\");\n"
"    EffDOCA->SetMinimum(minScale);\n"
"    EffDOCA->SetMaximum(maxScale);\n"
"    EffDOCA->SetTitle(\"FDC Per Wire Efficiency Vs. DOCA\");\n"
"    EffDOCA->GetXaxis()->SetTitle(\"Closest distance between track and wire [cm]\");\n"
"    EffDOCA->GetYaxis()->SetTitle(\"Efficiency\");\n"
"    TLine *lcut = new TLine(0.5,minScale,0.5,maxScale);\n"
"    lcut->SetLineColor(2);\n"
"    lcut->SetLineStyle(2);\n"
"    lcut->SetLineWidth(2);\n"
"    lcut->Draw();\n"
"  }\n"
"\n"
"  cEfficiency_vs->cd(2);\n"
"  TH1I *MeasTrackingFOM = (TH1I*)(gDirectory->Get(\"Offline/Measured Hits Vs Tracking FOM\"));\n"
"  TH1I *ExpTrackingFOM = (TH1I*)(gDirectory->Get(\"Offline/Expected Hits Vs Tracking FOM\"));\n"
"  if(MeasTrackingFOM && ExpTrackingFOM){\n"
"    TGraphAsymmErrors *EffTrackingFOM = new  TGraphAsymmErrors(MeasTrackingFOM, ExpTrackingFOM, \"ac\");\n"
"    EffTrackingFOM->Draw(\"ap\");\n"
"    EffTrackingFOM->SetMinimum(minScale);\n"
"    EffTrackingFOM->SetMaximum(maxScale);\n"
"    EffTrackingFOM->SetTitle(\"FDC Per Wire Efficiency Vs. Tracking FOM\");\n"
"    EffTrackingFOM->GetXaxis()->SetTitle(\"Tracking FOM\");\n"
"    EffTrackingFOM->GetYaxis()->SetTitle(\"Efficiency\");\n"
"  }\n"
"\n"
"  cEfficiency_vs->cd(3);\n"
"  TH1I *Meastheta = (TH1I*)(gDirectory->Get(\"Offline/Measured Hits Vs theta\"));\n"
"  TH1I *Exptheta = (TH1I*)(gDirectory->Get(\"Offline/Expected Hits Vs theta\"));\n"
"  if(Meastheta && Exptheta){\n"
"    TGraphAsymmErrors *Efftheta = new  TGraphAsymmErrors(Meastheta, Exptheta, \"ac\");\n"
"    Efftheta->Draw(\"ap\");\n"
"    Efftheta->SetMinimum(minScale);\n"
"    Efftheta->SetMaximum(maxScale);\n"
"    Efftheta->SetTitle(\"FDC Per Wire Efficiency Vs. #theta\");\n"
"    Efftheta->GetXaxis()->SetTitle(\"Track #theta [deg.]\");\n"
"    Efftheta->GetYaxis()->SetTitle(\"Efficiency\");\n"
"  }\n"
"\n"
"  cEfficiency_vs->cd(4);\n"
"  TH1I *Measphi = (TH1I*)(gDirectory->Get(\"Offline/Measured Hits Vs phi\"));\n"
"  TH1I *Expphi = (TH1I*)(gDirectory->Get(\"Offline/Expected Hits Vs phi\"));\n"
"  if(Measphi && Expphi){\n"
"    TGraphAsymmErrors *Effphi = new  TGraphAsymmErrors(Measphi, Expphi, \"ac\");\n"
"    Effphi->Draw(\"ap\");\n"
"    Effphi->SetMinimum(minScale);\n"
"    Effphi->SetMaximum(maxScale);\n"
"    Effphi->SetTitle(\"FDC Per Wire Efficiency Vs. #phi\");\n"
"    Effphi->GetXaxis()->SetTitle(\"Track #phi [deg.]\");\n"
"    Effphi->GetYaxis()->SetTitle(\"Efficiency\");\n"
"  }\n"
"\n"
"  cEfficiency_vs->cd(5);\n"
"  TH1I *Measp = (TH1I*)(gDirectory->Get(\"Offline/Measured Hits Vs p\"));\n"
"  TH1I *Expp = (TH1I*)(gDirectory->Get(\"Offline/Expected Hits Vs p\"));\n"
"  if(Measp && Expp){\n"
"    TGraphAsymmErrors *Effp = new  TGraphAsymmErrors(Measp, Expp, \"ac\");\n"
"    Effp->Draw(\"ap\");\n"
"    Effp->SetMinimum(minScale);\n"
"    Effp->SetMaximum(maxScale);\n"
"    Effp->SetTitle(\"FDC Per Wire Efficiency Vs. p\");\n"
"    Effp->GetXaxis()->SetTitle(\"Track Momentum [GeV/c]\");\n"
"    Effp->GetYaxis()->SetTitle(\"Efficiency\");\n"
"  }\n"
"\n"
"  cEfficiency_vs->cd(6);\n"
"  TH1I *Meascells = (TH1I*)(gDirectory->Get(\"Offline/Measured Hits Vs Hit Cells\"));\n"
"  TH1I *Expcells = (TH1I*)(gDirectory->Get(\"Offline/Expected Hits Vs Hit Cells\"));\n"
"  if(Meascells && Expcells){\n"
"    TGraphAsymmErrors *Effcells = new  TGraphAsymmErrors(Meascells, Expcells, \"ac\");\n"
"    Effcells->Draw(\"ap\");\n"
"    Effcells->SetMinimum(minScale);\n"
"    Effcells->SetMaximum(maxScale);\n"
"    Effcells->SetTitle(\"FDC Per Wire Efficiency Vs. Contributing Cells\");\n"
"    Effcells->GetXaxis()->SetTitle(\"FDC Cells\");\n"
"    Effcells->GetYaxis()->SetTitle(\"Efficiency\");\n"
"  }\n"
"\n"
"  if (save) cEfficiency_vs->SaveAs(\"cEfficiency_vs.pdf\");\n"
"\n"
"  dir->cd();\n"
"  gDirectory->cd(\"Residuals\");\n"
"\n"
"\n"
"  TCanvas *cResidual_Pseudo = new TCanvas(\"cResidual_Pseudo\", \"Pseudo Hit Resolution\", 1000, 800);\n"
"  cResidual_Pseudo->Divide(6,4);\n"
"\n"
"  double meanV[24];\n"
"  double meanV_err[24];\n"
"  double meanU[24];\n"
"  double meanU_err[24];\n"
"    \n"
"  for(unsigned int icell=1; icell<=24; icell++){\n"
"    cResidual_Pseudo->cd(icell);\n"
"    char hname5[256];\n"
"    sprintf(hname5, \"hPseudoResV_cell[%d]\", icell);\n"
"    TH1 *h5 = (TH1*)(gDirectory->Get(hname5));\n"
"    char hname6[256];\n"
"    sprintf(hname6, \"hPseudoResU_cell[%d]\", icell);\n"
"    TH1 *h6 = (TH1*)(gDirectory->Get(hname6));\n"
"      \n"
"    h5->GetXaxis()->SetTitle(\"Position Resolution (cm)\");\n"
"    h5->GetXaxis()->SetRangeUser(-1,1);\n"
"    h5->Draw();\n"
"    h5->Fit(\"gaus\",\"q0\");\n"
"    TF1 *fgaus5 = h5->GetFunction(\"gaus\");\n"
"    meanV[icell-1] = fgaus5->GetParameter(1);\n"
"    //mean_err[icell-1] = fgaus5->GetParError(1) * fgaus->GetChisquare()/(fgaus->GetNDF()-1);\n"
"    meanV_err[icell-1] = fgaus5->GetParameter(2);\n"
"\n"
"    h6->SetLineColor(2);\n"
"    h6->Draw(\"same\");\n"
"    h6->Fit(\"gaus\",\"q0\");\n"
"    TF1 *fgaus6 = h6->GetFunction(\"gaus\");\n"
"    meanU[icell-1] = fgaus6->GetParameter(1);\n"
"    //mean_err[icell-1] = fgaus6->GetParError(1) * fgaus->GetChisquare()/(fgaus->GetNDF()-1);\n"
"    meanU_err[icell-1] = fgaus6->GetParameter(2);\n"
"    \n"
"  }\n"
"\n"
"  const unsigned int rad = 1;\n"
"\n"
"  TCanvas *cResidual_Pseudo2 = new TCanvas(\"cResidual_Pseudo2\", \"Pseudo Hit Resolution 2D\", 1000, 800);\n"
"  cResidual_Pseudo2->Divide(6,4);\n"
"\n"
"  for(unsigned int icell=1; icell<=24; icell++){\n"
"    cResidual_Pseudo2->cd(icell);\n"
"    for (unsigned int r=0; r<rad; r++){\n"
"      char hname7[256];\n"
"      sprintf(hname7, \"hPseudoResUvsV_cell[%d]_radius[%d]\", icell, (r+1)*(45/rad));\n"
"      TH2 *h7 = (TH2*)(gDirectory->Get(hname7));\n"
"      \n"
"      if (h7){\n"
"	h7->GetYaxis()->SetTitle(\"Position reconstructed along Wire (cm)\");\n"
"	h7->GetYaxis()->SetRangeUser(-0.5,0.5);\n"
"	h7->GetXaxis()->SetTitle(\"Position perp. to Wire (cm)\");\n"
"	h7->GetXaxis()->SetRangeUser(-0.5,0.5);\n"
"	h7->Draw(\"col\");\n"
"	h7->ProfileY();\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  double slope[rad][24];\n"
"  double slope_err[rad][24];\n"
"  double cell[rad][24];\n"
"  double cell_err[rad][24];\n"
"  TCanvas *cResidual_Profile = new TCanvas(\"cResidual_Profile\", \"Pseudo Resolution Profile\", 1000, 800);\n"
"  cResidual_Profile->Divide(6,4);\n"
"  \n"
"  for(unsigned int icell=1; icell<=24; icell++){\n"
"    cResidual_Profile->cd(icell);\n"
"    for (unsigned int r=0; r<rad; r++){\n"
"      cell[r][icell-1] = icell + 0.1*r;\n"
"      cell_err[r][icell-1] = 0;\n"
"      char hname8[256];\n"
"      sprintf(hname8, \"hPseudoResUvsV_cell[%d]_radius[%d]_pfy\", icell, (r+1)*(45/rad));\n"
"      TH1 *h8 = (TH1*)(gDirectory->Get(hname8));\n"
"      \n"
"      if (h8){\n"
"	h8->GetXaxis()->SetTitle(\"Position reconstructed along Wire (cm)\");\n"
"	h8->GetXaxis()->SetRangeUser(-0.15,0.15);\n"
"	h8->GetYaxis()->SetTitle(\"Position perp. to Wire (cm)\");\n"
"	h8->GetYaxis()->SetRangeUser(-0.5,0.5);\n"
"	h8->GetYaxis()->SetTitleFont(42);\n"
"	h8->GetYaxis()->SetTitleSize(0.035);\n"
"	h8->GetYaxis()->SetLabelFont(42);\n"
"	h8->GetYaxis()->SetLabelSize(0.035);\n"
"	h8->SetLineColor(r+1);\n"
"	if (r == 0)\n"
"	  h8->Draw();\n"
"	else \n"
"	  h8->Draw(\"same\");\n"
"	\n"
"	TF1 *fp1 = new TF1(\"fp1\",\"[0]+x*[1]\",-0.08,0.08);\n"
"	fp1->SetLineColor(r+1);\n"
"	h8->Fit(\"fp1\",\"qr\");\n"
"	slope[r][icell-1] = fp1->GetParameter(1);\n"
"	slope_err[r][icell-1] = fp1->GetParError(1);\n"
"      }\n"
"      else {\n"
"	// histograms not present\n"
"	slope[r][icell-1] = 0;\n"
"	slope_err[r][icell-1] = 0;\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  TCanvas *cAlignment = new TCanvas(\"cAlignment\", \"Alignment\", 1200, 1000);\n"
"  cAlignment->Divide(2,2);\n"
"  \n"
"  cAlignment->cd(1);\n"
"  TGraphErrors *galignV = new TGraphErrors(24, cell[0], meanV, cell_err[0], meanV_err);\n"
"  galignV->SetTitle(\"Alignment along Wire (Error Bars: Sigma); Cell # ; V_{Hit} - V_{Track} (cm)\");\n"
"  galignV->SetMarkerColor(1);\n"
"  galignV->SetMarkerStyle(2);\n"
"  galignV->Draw(\"AP\");\n"
"\n"
"  TLine *lpack12 = new TLine(6.5, -0.1, 6.5, 0.1);\n"
"  lpack12->SetLineColor(2);\n"
"  lpack12->SetLineStyle(2);\n"
"  lpack12->SetLineWidth(2);\n"
"  lpack12->Draw();\n"
"  TLine *lpack23 = new TLine(12.5, -0.1, 12.5, 0.1);\n"
"  lpack23->SetLineColor(2);\n"
"  lpack23->SetLineStyle(2);\n"
"  lpack23->SetLineWidth(2);\n"
"  lpack23->Draw();\n"
"  TLine *lpack34 = new TLine(18.5, -0.1, 18.5, 0.1);\n"
"  lpack34->SetLineColor(2);\n"
"  lpack34->SetLineStyle(2);\n"
"  lpack34->SetLineWidth(2);\n"
"  lpack34->Draw();\n"
"\n"
"  cAlignment->cd(2);\n"
"  TGraphErrors *galignU = new TGraphErrors(24, cell[0], meanU, cell_err[0], meanU_err);\n"
"  galignU->SetTitle(\"Alignment perp. to Wire (Error Bars: Sigma); Cell # ; U_{Hit} - U_{Track} (cm)\");\n"
"  galignU->SetMarkerColor(1);\n"
"  galignU->SetMarkerStyle(2);\n"
"  galignU->Draw(\"AP\");\n"
"\n"
"  lpack12->Draw();\n"
"  lpack23->Draw();\n"
"  lpack34->Draw();\n"
"\n"
"  cAlignment->cd(3);\n"
"  TGraphErrors *gmagnet[rad];\n"
"  for (unsigned int r=0; r<rad; r++){\n"
"    gmagnet[r] = new TGraphErrors(24, cell[r], slope[r], cell_err[r], slope_err[r]);\n"
"    gmagnet[r]->SetTitle(\"Value for slope of magnetic deflection; Cell # ; Slope (cm^{-1})\");\n"
"    gmagnet[r]->SetMarkerColor(r+1);\n"
"    gmagnet[r]->SetMarkerStyle(2);\n"
"    if (r==0)\n"
"      gmagnet[r]->Draw(\"AP\");\n"
"    else \n"
"      gmagnet[r]->Draw(\"Psame\");\n"
"  }\n"
"}\n"
;
class FDC_Efficiency_rootspy_class{
   public:
   typedef void rmfcn(string, string, string);
   FDC_Efficiency_rootspy_class(){
      rmfcn* fcn = (rmfcn*)dlsym(RTLD_DEFAULT, "REGISTER_ROOTSPY_MACRO");
      if(fcn) (*fcn)("FDC_Efficiency","/", macro_data);
   }
};
static FDC_Efficiency_rootspy_class tmp;